// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ruleengine_elasticsearch.step0_extractdatanormalizedout_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: step0_extractDataNormalizedOut Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class step0_extractDataNormalizedOut implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (JSONFileName != null) {

				this.setProperty("JSONFileName", JSONFileName.toString());

			}

			if (indexName != null) {

				this.setProperty("indexName", indexName.toString());

			}

			if (indexType != null) {

				this.setProperty("indexType", indexType.toString());

			}

		}

		public String JSONFileName;

		public String getJSONFileName() {
			return this.JSONFileName;
		}

		public String indexName;

		public String getIndexName() {
			return this.indexName;
		}

		public String indexType;

		public String getIndexType() {
			return this.indexType;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "step0_extractDataNormalizedOut";
	private final String projectName = "RULEENGINE_ELASTICSEARCH";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					step0_extractDataNormalizedOut.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(step0_extractDataNormalizedOut.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPivotToColumnsDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut = new byte[0];
		static byte[] commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		public String result;

		public String getResult() {
			return this.result;
		}

		public String ruleid;

		public String getRuleid() {
			return this.ruleid;
		}

		public String rule_execution_id;

		public String getRule_execution_id() {
			return this.rule_execution_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut.length) {
					if (length < 1024
							&& commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut.length == 0) {
						commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut = new byte[1024];
					} else {
						commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut,
						0, length);
				strReturn = new String(
						commonByteArray_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RULEENGINE_ELASTICSEARCH_step0_extractDataNormalizedOut) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

					this.result = readString(dis);

					this.ruleid = readString(dis);

					this.rule_execution_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

				// String

				writeString(this.result, dos);

				// String

				writeString(this.ruleid, dos);

				// String

				writeString(this.rule_execution_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append(",result=" + result);
			sb.append(",ruleid=" + ruleid);
			sb.append(",rule_execution_id=" + rule_execution_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tPivotToColumnsDelimited_1 begin ] start
				 */

				ok_Hash.put("tPivotToColumnsDelimited_1", false);
				start_Hash.put("tPivotToColumnsDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tPivotToColumnsDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tPivotToColumnsDelimited_1 = 0;

				class BytesLimit65535_tPivotToColumnsDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPivotToColumnsDelimited_1()
						.limitLog4jByte();

				int nb_line_tPivotToColumnsDelimited_1 = 0;
				resourceMap.put("nb_line_tPivotToColumnsDelimited_1",
						nb_line_tPivotToColumnsDelimited_1);
				int nb_line_out_tPivotToColumnsDelimited_1 = 0;

				String fileName_tPivotToColumnsDelimited_1 = (new java.io.File(
						"K:/TOS_BD-20170623_1246-V6.4.1/workspace/RULEENGINE_ELASTICSEARCH/out.csv"))
						.getAbsolutePath().replace("\\", "/");
				resourceMap.put("fileName_tPivotToColumnsDelimited_1",
						fileName_tPivotToColumnsDelimited_1);
				String fullName_tPivotToColumnsDelimited_1 = null;
				String extension_tPivotToColumnsDelimited_1 = null;
				String directory_tPivotToColumnsDelimited_1 = null;
				if ((fileName_tPivotToColumnsDelimited_1.indexOf("/") != -1)) {
					if (fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") < fileName_tPivotToColumnsDelimited_1
							.lastIndexOf("/")) {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
						extension_tPivotToColumnsDelimited_1 = "";
					} else {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(0,
										fileName_tPivotToColumnsDelimited_1
												.lastIndexOf("."));
						extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(fileName_tPivotToColumnsDelimited_1
										.lastIndexOf("."));
					}
					directory_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
							.substring(0, fileName_tPivotToColumnsDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") != -1) {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(0,
										fileName_tPivotToColumnsDelimited_1
												.lastIndexOf("."));
						extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(fileName_tPivotToColumnsDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
						extension_tPivotToColumnsDelimited_1 = "";
					}
					directory_tPivotToColumnsDelimited_1 = "";
				}
				// create directory only if not exists
				if (directory_tPivotToColumnsDelimited_1 != null
						&& directory_tPivotToColumnsDelimited_1.trim().length() != 0) {
					java.io.File dir_tPivotToColumnsDelimited_1 = new java.io.File(
							directory_tPivotToColumnsDelimited_1);
					if (!dir_tPivotToColumnsDelimited_1.exists()) {
						dir_tPivotToColumnsDelimited_1.mkdirs();
					}
				}
				java.io.FileOutputStream fos_tPivotToColumnsDelimited_1 = null;
				java.io.OutputStreamWriter osw_tPivotToColumnsDelimited_1 = null;
				java.io.BufferedWriter outtPivotToColumnsDelimited_1 = null;
				outtPivotToColumnsDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tPivotToColumnsDelimited_1,
										false), "ISO-8859-15"));
				resourceMap.put("outtPivotToColumnsDelimited_1",
						outtPivotToColumnsDelimited_1);

				java.io.File filetPivotToColumnsDelimited_1 = new java.io.File(
						fileName_tPivotToColumnsDelimited_1);

				boolean pivot_ExiststPivotToColumnsDelimited_1 = false;

				StringBuilder pivot_KeytPivotToColumnsDelimited_1 = new StringBuilder();

				java.util.List<String> pivot_KeystPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

				boolean group_ExiststPivotToColumnsDelimited_1 = false;

				StringBuilder group_KeytPivotToColumnsDelimited_1 = new StringBuilder();

				java.util.Set<java.util.List<String>> group_KeystPivotToColumnsDelimited_1 = new java.util.LinkedHashSet<java.util.List<String>>();

				java.util.List<String> gKvaluetPivotToColumnsDelimited_1 = null;

				java.util.List<String> aggValuestPivotToColumnsDelimited_1 = null;

				java.util.Map<java.util.List<String>, java.util.List<String>> aggregationtPivotToColumnsDelimited_1 = new java.util.HashMap<java.util.List<String>, java.util.List<String>>();

				/**
				 * [tPivotToColumnsDelimited_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				"C:/Users/User/Downloads/out.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.id = null;

								row1.pivot_key = null;

								row1.pivot_value = null;

								row1.result = null;

								row1.ruleid = null;

								row1.rule_execution_id = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {
										try {

											row1.id = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1
													.setException(ex_tFileInputDelimited_1);
										}
									} else {

										row1.id = null;

									}

								} else {
									row1.id = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.pivot_key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.pivot_key = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.pivot_value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.pivot_value = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.result = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.result = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.ruleid = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.ruleid = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.rule_execution_id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.rule_execution_id = null;
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tPivotToColumnsDelimited_1 main ] start
							 */

							currentComponent = "tPivotToColumnsDelimited_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							// pivot key
							pivot_ExiststPivotToColumnsDelimited_1 = false;

							int pivotNumtPivotToColumnsDelimited_1 = 0;

							for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1
									.size(); i++) {

								if (pivot_KeystPivotToColumnsDelimited_1.get(i)
										.equals(row1.pivot_key)) {
									pivot_ExiststPivotToColumnsDelimited_1 = true;

									pivotNumtPivotToColumnsDelimited_1 = i + 1;

									break;

								}
							}

							if (!pivot_ExiststPivotToColumnsDelimited_1) {

								pivot_KeytPivotToColumnsDelimited_1.delete(0,
										pivot_KeytPivotToColumnsDelimited_1
												.length());
								pivot_KeystPivotToColumnsDelimited_1
										.add(pivot_KeytPivotToColumnsDelimited_1
												.append(row1.pivot_key)
												.toString());

								pivotNumtPivotToColumnsDelimited_1 = pivot_KeystPivotToColumnsDelimited_1
										.size();

							}

							// group key
							group_ExiststPivotToColumnsDelimited_1 = false;

							gKvaluetPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

							group_KeytPivotToColumnsDelimited_1.delete(0,
									group_KeytPivotToColumnsDelimited_1
											.length());

							gKvaluetPivotToColumnsDelimited_1
									.add(group_KeytPivotToColumnsDelimited_1
											.append(row1.ruleid).toString());

							group_KeytPivotToColumnsDelimited_1.delete(0,
									group_KeytPivotToColumnsDelimited_1
											.length());

							gKvaluetPivotToColumnsDelimited_1
									.add(group_KeytPivotToColumnsDelimited_1
											.append(row1.rule_execution_id)
											.toString());

							group_KeytPivotToColumnsDelimited_1.delete(0,
									group_KeytPivotToColumnsDelimited_1
											.length());

							gKvaluetPivotToColumnsDelimited_1
									.add(group_KeytPivotToColumnsDelimited_1
											.append(row1.id).toString());

							group_KeytPivotToColumnsDelimited_1.delete(0,
									group_KeytPivotToColumnsDelimited_1
											.length());

							gKvaluetPivotToColumnsDelimited_1
									.add(group_KeytPivotToColumnsDelimited_1
											.append(row1.result).toString());

							group_KeytPivotToColumnsDelimited_1.delete(0,
									group_KeytPivotToColumnsDelimited_1
											.length());

							if (group_KeystPivotToColumnsDelimited_1
									.contains(gKvaluetPivotToColumnsDelimited_1)) {
								group_ExiststPivotToColumnsDelimited_1 = true;
							}

							if (!group_ExiststPivotToColumnsDelimited_1) {

								group_KeytPivotToColumnsDelimited_1.delete(0,
										group_KeytPivotToColumnsDelimited_1
												.length());

								group_KeystPivotToColumnsDelimited_1
										.add(gKvaluetPivotToColumnsDelimited_1);

								aggValuestPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

								for (int i = 0; i < pivotNumtPivotToColumnsDelimited_1 - 1; i++)

									aggValuestPivotToColumnsDelimited_1.add("");

								aggValuestPivotToColumnsDelimited_1.add(String
										.valueOf(row1.pivot_value));
								aggregationtPivotToColumnsDelimited_1.put(
										gKvaluetPivotToColumnsDelimited_1,
										aggValuestPivotToColumnsDelimited_1);

							} else {

								java.util.List<String> aggStrtPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1
										.get(gKvaluetPivotToColumnsDelimited_1);

								int aggSizetPivotToColumnsDelimited_1 = aggStrtPivotToColumnsDelimited_1
										.size();
								if (aggSizetPivotToColumnsDelimited_1 < pivotNumtPivotToColumnsDelimited_1) {

									for (int i = 0; i < pivotNumtPivotToColumnsDelimited_1
											- aggSizetPivotToColumnsDelimited_1
											- 1; i++) {

										aggStrtPivotToColumnsDelimited_1
												.add("");

									}

									aggStrtPivotToColumnsDelimited_1.add(String
											.valueOf(row1.pivot_value));

								} else {

									// step1: get the index of the pivot
									int pivotIndextPivotToColumnsDelimited_1 = 0;

									for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1
											.size(); i++) {

										if (pivot_KeystPivotToColumnsDelimited_1
												.get(i).equals(row1.pivot_key)) {
											pivotIndextPivotToColumnsDelimited_1 = i;

											break;

										}

									}

									// step2: process the splitted data
									// according to function

									aggStrtPivotToColumnsDelimited_1
											.set(pivotIndextPivotToColumnsDelimited_1,
													String.valueOf(row1.pivot_value));

								}

							}

							nb_line_tPivotToColumnsDelimited_1++;
							resourceMap.put(
									"nb_line_tPivotToColumnsDelimited_1",
									nb_line_tPivotToColumnsDelimited_1);

							tos_count_tPivotToColumnsDelimited_1++;

							/**
							 * [tPivotToColumnsDelimited_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tPivotToColumnsDelimited_1 end ] start
				 */

				currentComponent = "tPivotToColumnsDelimited_1";

				nb_line_out_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1
						.size();

				// ////////////////////////////// Delimited /////////

				outtPivotToColumnsDelimited_1.write("ruleid");

				outtPivotToColumnsDelimited_1.write(";");

				outtPivotToColumnsDelimited_1.write("rule_execution_id");

				outtPivotToColumnsDelimited_1.write(";");

				outtPivotToColumnsDelimited_1.write("id");

				outtPivotToColumnsDelimited_1.write(";");

				outtPivotToColumnsDelimited_1.write("result");

				outtPivotToColumnsDelimited_1.write(";");

				for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {
					outtPivotToColumnsDelimited_1
							.write(pivot_KeystPivotToColumnsDelimited_1.get(i));
					if (i == pivot_KeystPivotToColumnsDelimited_1.size() - 1) {
						break;
					}
					outtPivotToColumnsDelimited_1.write(";");
				}

				outtPivotToColumnsDelimited_1.write("\n");

				java.util.Iterator<List<String>> iterator_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1
						.iterator();

				while (iterator_tPivotToColumnsDelimited_1.hasNext()) {
					List<String> next = iterator_tPivotToColumnsDelimited_1
							.next();
					for (int j = 0; j < next.size(); j++) {
						outtPivotToColumnsDelimited_1.write(next.get(j));
						outtPivotToColumnsDelimited_1.write(";");
					}

					java.util.List<String> aggOuttPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1
							.get(next);

					int gaptPivotToColumnsDelimited_1 = aggOuttPivotToColumnsDelimited_1
							.size()
							- pivot_KeystPivotToColumnsDelimited_1.size();

					if (gaptPivotToColumnsDelimited_1 < 0) {

						for (int k = 0; k < -gaptPivotToColumnsDelimited_1; k++)
							aggOuttPivotToColumnsDelimited_1.add("");

					}

					for (int j = 0; j < aggOuttPivotToColumnsDelimited_1.size(); j++) {
						outtPivotToColumnsDelimited_1
								.write(aggOuttPivotToColumnsDelimited_1.get(j));
						if (j == aggOuttPivotToColumnsDelimited_1.size() - 1) {
							break;
						}
						outtPivotToColumnsDelimited_1.write(";");
					}

					outtPivotToColumnsDelimited_1.write("\n");

				}

				if (outtPivotToColumnsDelimited_1 != null) {
					outtPivotToColumnsDelimited_1.flush();
					outtPivotToColumnsDelimited_1.close();
				}

				resourceMap.put("finish_tPivotToColumnsDelimited_1", true);

				globalMap.put("tPivotToColumnsDelimited_1_NB_LINE",
						nb_line_tPivotToColumnsDelimited_1);
				globalMap.put("tPivotToColumnsDelimited_1_NB_LINE_OUT",
						nb_line_out_tPivotToColumnsDelimited_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPivotToColumnsDelimited_1", true);
				end_Hash.put("tPivotToColumnsDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tPivotToColumnsDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tPivotToColumnsDelimited_1 finally ] start
				 */

				currentComponent = "tPivotToColumnsDelimited_1";

				if (resourceMap.get("finish_tPivotToColumnsDelimited_1") == null) {

					if (resourceMap.get("outtPivotToColumnsDelimited_1") != null) {
						((java.io.BufferedWriter) resourceMap
								.get("outtPivotToColumnsDelimited_1")).flush();
						((java.io.BufferedWriter) resourceMap
								.get("outtPivotToColumnsDelimited_1")).close();
					}

				}

				/**
				 * [tPivotToColumnsDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final step0_extractDataNormalizedOut step0_extractDataNormalizedOutClass = new step0_extractDataNormalizedOut();

		int exitCode = step0_extractDataNormalizedOutClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = step0_extractDataNormalizedOut.class
					.getClassLoader().getResourceAsStream(
							"ruleengine_elasticsearch/step0_extractdatanormalizedout_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("JSONFileName", "id_String");

			context.JSONFileName = (String) context.getProperty("JSONFileName");
			context.setContextType("indexName", "id_String");

			context.indexName = (String) context.getProperty("indexName");
			context.setContextType("indexType", "id_String");

			context.indexType = (String) context.getProperty("indexType");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("JSONFileName")) {
				context.JSONFileName = (String) parentContextMap
						.get("JSONFileName");
			}
			if (parentContextMap.containsKey("indexName")) {
				context.indexName = (String) parentContextMap.get("indexName");
			}
			if (parentContextMap.containsKey("indexType")) {
				context.indexType = (String) parentContextMap.get("indexType");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : step0_extractDataNormalizedOut");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 55838 characters generated by Talend Open Studio for Big Data on the January
 * 16, 2018 2:03:00 AM EST
 ************************************************************************************************/
